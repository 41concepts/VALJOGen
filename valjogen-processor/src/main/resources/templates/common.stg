optFinal(model) ::= <%
<if(model.final)>final<\ ><endif>
%>

optSynchronized(propertyOrClass) ::= <%
<if(propertyOrClass.synchronized)>synchronized<\ ><endif>
%>

optAbstract(clazz) ::= <%
<if(clazz.abstract)>abstract<\ ><endif>
%>

optScope(clazz) ::= <%
<if(!clazz.configuration.emptyClazzScope)><clazz.configuration.clazzScope><\ ><endif>
%>

optBaseClass(clazz) ::= <%
<if(!clazz.baseClazzType.rootObject)> extends <clazz.baseClazzType.name><endif>
%>

optGenericQualifier(clazz) ::= <%
<if(clazz.genericQualifier)> <clazz.genericQualifierText> <endif>
%>

internalLevel(model) ::= <%
<if(model.final)>
private<\ >
<else>
protected<\ >
<endif>
%>

guard(member, param) ::= <%
<if(member.ensureNotNullEnabled && member.type.object)>
<clazz.helperTypes.javaUtilObjects.name>.requireNonNull(<param.name>)
<else>
<param.name>
<endif>
%>

uniqueVariableName(model, str) ::= <%
<model.variablesPrefix><str>
%>

implementationMethod(javaName) ::= <%
method_<javaName>
%>

declare_method(clazz, method) ::= <<
public <optSynchronized(clazz)><method.returnType.name> <method.name>(<method.parameters:declare_parameter(); wrap, anchor, separator=", ">)
>>

declare_parameter(param) ::= <<
final <param.type.name> <param.name>
>>

other_instance_get_member_value(other, member) ::= <%
<if(other.type.selfType)>
 <other.name>.<member.name>
<else>
 <if(member.getter)>
  <other.name>.<member.getter.name>()
 <else>
  ?
 <endif>
<endif>
%>