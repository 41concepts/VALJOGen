/**
* Copyright (C) 2014 41concepts Aps
*
* This is a helper template group file that is responsible for generating the compareTo method.
**/
method_compareTo_T(clazz, method) ::= <<
<@javadoc><JavaDocMethod(method)><@end><@annotations>@Override<@end>
<declare_method(clazz, method)>
{
  <@preamble><@end>
  int <uniqueVariableName(clazz,"result")>;

  <clazz.chosenComparableMembers:{m | <(comparableTemplateNamesByTypeCategory.(m.type.typeCategory))(clazz, first(method.parameters), m, m.type)>}; wrap, anchor, separator="\n">

  <@postamble><@end>
  return <@returnvalue>0<@end>;
}
>>

comparableTemplateNamesByTypeCategory ::= [ "PRIMITIVE": "comparable_primitive", "ARRAY": "comparable_array", default: "comparable_object"]

comparable_primitive(clazz, other, member, type) ::= <<
if ((<uniqueVariableName(clazz,"result")>=<type.wrapperName>.compare(<member.name>, <other_instance_get_member_value(other, member)>))!=0)
 return <@returnvalue><uniqueVariableName(clazz,"result")><@end>;
>>

comparable_array(clazz, param, var, type) ::= <<
 <! Arrays are not supported and this method will not be called unless explicitly requested !>
 // SKIPPING: <member.name> : Comparing arrays not supported
>>

comparable_object(clazz, other, member, type) ::= <<
<if(type.ofType_Comparable && (other.type.thisType || member.getter))><\\>
if ((<uniqueVariableName(clazz,"result")>=<member.name>.compareTo(<other_instance_get_member_value(other, member)>))!=0)
 return <@returnvalue><uniqueVariableName(clazz,"result")><@end>;<\\>
<else>
 <! This case is not supported and should not happen unless explicitly requested !>
 // SKIPPING: <member.name> : Comparing non-comparable objects or members through interfaces without getters not supported.
<endif>
>>
