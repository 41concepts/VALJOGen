/**
* Copyright (C) 2014 41concepts Aps
*
* This is a helper template group file that is responsible for generating the hashCode method.
**/
method_hashCode(clazz, method) ::= <<
<@javadoc><JavaDocMethod(method)><@end><@annotations>@Override<@end>
<declare_method(clazz, method)>
{
  <@preamble><@end>
  <if(clazz.primitiveMembers || clazz.arrayMembers)>
  final int <uniqueVariableName(clazz,"prime")> = 31;
  int <uniqueVariableName(clazz,"result")> = <if(method.declaringType.rootObject)>1<else>super.hashCode()<endif>;
  <clazz.members:{m | <uniqueVariableName(clazz,"result")> = <uniqueVariableName(clazz,"prime")> * <uniqueVariableName(clazz,"result")> + <(hashTemplateNamesByTypeCategory.(m.type.typeCategory))(m.name, m.type)> }; separator="\n">
  <elseif(clazz.anyMembers)>
  int <uniqueVariableName(clazz,"result")> = <if(!method.declaringType.rootObject)>31 * super.hashCode() + <endif><clazz.helperTypes.javaUtilObjects.name>.hash(<clazz.members:{p | <p.name>}; separator=", ">);
  <else>
  int <uniqueVariableName(clazz,"result")> = <if(method.declaringType.rootObject)>0<else>super.hashCode()<endif>;
  <endif>
  <@postamble><@end>
  return <@returnvalue><uniqueVariableName(clazz,"result")><@end>;
}
>>

hashTemplateNamesByTypeCategory ::= [ "PRIMITIVE": "hash_primitive", "ARRAY": "hash_array", default: "hash_object"]

hash_primitive(var,type) ::= <<
<type.wrapperName>.hashCode(<var>);
>>

hash_array(var, type) ::= <%
<if(type.multiDimensionalArray)>
<clazz.helperTypes.javaUtilArrays.name>.deepHashCode(<var>);
<else>
<clazz.helperTypes.javaUtilArrays.name>.hashCode(<var>);
<endif>
%>

hash_object(var, type) ::= <<
<clazz.helperTypes.javaUtilObjects.name>.hashCode(<var>);
>>
