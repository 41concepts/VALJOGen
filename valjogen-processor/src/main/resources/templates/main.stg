import "common.stg"
import "hash.stg"
import "equals.stg"
import "tostring.stg"
import "javadoc.stg"

class(clazz) ::= <<
<if(!clazz.inDefaultPackage)>
package <clazz.packageName>;

<clazz.importTypes:importStatement(); separator="\n">

<endif>
<classJavaDoc(clazz)>

<optScope(clazz)><optFinal(clazz)><optAbstract(clazz)>class <clazz.prototypicalName><optBaseClass(clazz)> implements <clazz.interfaceTypes:{ _i |<_i.prototypicalName>}; wrap, anchor, separator=", ">
{
  <if(clazz.serializable && clazz.configuration.serialVersionUIDSpecified)>
  private static final long serialVersionUID = <clazz.configuration.serialVersionUID>;
  <endif>

  <clazz.members:declareMember(); separator="\n">

  <if(!clazz.abstract)>
  <factoryMethod(clazz)>
  <endif>

  <constructor(clazz)>

  <clazz.propertyMethods:property(); separator="\n">

  <if(clazz.configuration.hashEnabled && clazz.anyMembers)>
  <hashCode(clazz)>
  <endif>

  <if(clazz.configuration.equalsEnabled && clazz.anyMembers)>
  <equals(clazz)>
  <endif>

  <if(clazz.configuration.toStringEnabled)>
  <toString(clazz)>
  <endif>
}
>>

importStatement(type) ::= <<
import <type.qualifiedName>;
>>

declareMember(member) ::= <<
<internalLevel(member.clazz)><optFinal(member)><member.type.name> <member.name>;
>>

constructor(clazz) ::= <<
<constructorJavaDoc(clazz)>
<internalLevel(clazz)><clazz.name>(<clazz.members:formalParameter(); wrap, anchor, separator=", ">)
{
  <if(!clazz.baseClazzType.rootObject)>super();<endif>
  <clazz.members:{p | this.<p.name>=<guard(p, p)>;}; wrap, anchor, separator="\n">
}
>>

factoryMethod(clazz) ::= <<
public static <optGenericQualifier(clazz)><clazz.prototypicalName> valueOf(<clazz.members:formalParameter(); wrap, anchor, separator=", ">)
{
  return new <clazz.name>(<clazz.members:{m | <m.name>}; wrap, anchor, separator=", ">);
}
>>

formalParameter(member) ::= <%
final <member.type.name> <member.name>
%>

property(property) ::= <<
<propertyJavaDoc(property)>
@Override
public <optFinal(property)><optSynchronized(property)><property.returnType.name> <property.name>(<property.parameters:formalParameter(); wrap, anchor, separator=", ">)
{
<if(property.getter)>
  return <property.member.name>;
<elseif(property.setter)>
  <if(property.selfReturnType)>
  return new <clazz.name>(<[property.member.otherMembersBeforeThis:{m | this.<m.name>}, property.parameter.name , property.member.otherMembersAfterThis:{m | this.<m.name>}]; wrap, anchor, separator=", ">);
  <else>
  this.<property.member.name>=<guard(property.member, property.parameter)>;
  <endif>
<endif>
}
>>
