/**
* Copyright (C) 2014 41concepts Aps
*
* This is a helper template group file that is responsible for generating properties (getters/setters).
**/

property(clazz, property) ::= <%
<if(property.getter)>
 <getter(clazz, property)>
<elseif(property.immutableSetter)>
 <immutable_setter(clazz, property)>
<elseif(property.mutableSetter)>
 <mutable_setter(clazz, property)>
<else>
 <! Error - Should not occur !>
<endif>
%>

getter(clazz, property) ::= <<
<@javadoc><JavaDocMethod(property)><@end><@annotations>@Override<\n><@end><\\>
<declare_property(clazz, property)>
{
 <@preamble><@end>
 <@postamble><@end>
 return <@returnvalue><property.member.name><@end>;
}
>>

mutable_setter(clazz, property) ::= <<
<@javadoc><JavaDocMethod(property)><@end><@annotations>@Override<\n><@end><\\>
<declare_property(clazz, property)>
{
 <@preamble><@end>
 this.<property.member.name>=<guard(property.member, property.parameter)>;
 <@postamble><@end>
}
>>

immutable_setter(clazz, property) ::= <<
<@javadoc><JavaDocMethod(property)><@end><@annotations>@Override<\n><@end><\\>
<declare_property(clazz, property)>
{
 <@preamble><@end>
 <@postamble><@end>
 return <@returnvalue>new <clazz.prototypicalName>(<[property.member.otherMembersBeforeThis:{m | this.<m.name>}, property.parameter.name , property.member.otherMembersAfterThis:{m | this.<m.name>}]; wrap, anchor, separator=", ">)<@end>;
}
>>

declare_property(clazz, property) ::= <%
<property.modifiers:{m | <m>}; separator=" "> <property.overriddenReturnType.prototypicalName> <property.name>(<property.parameters:{param | <declare_parameter(property, param)>}; wrap, anchor, separator=", ">)
<if(property.thrownTypes)>
<\ >throws <property.thrownTypes:{m | <m.name>}; wrap, anchor, separator=", ">
<endif>
%>
